storm trident 学习

jvm 学习

zookeeper复习细节整理到项目中


kafka学习



框架
springmvc
spring
mybatis


dubbo
springboot


storm
zookeeper

rabbitmq
kafka
kafka只能保证一个partition中的消息被某个consumer消费时,消息是顺序的.事实上,从Topic角度来说,消息仍不是有序的.


canal
neo4j


悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，
所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，
比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。


乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，
但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，
这样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。

数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。
当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。

第一次操作
读取version:0;
准备业务数据data
然后save-->读取库中的version是否等于0;等于0然后就更新version=1;和更新数据

第二次操作
线程1读取version:1;
线程2读取version:1;

线程1准备业务数据data
线程1然后update-->读取库中的version是否等于1;等于1然后就更新version=2;和更新数据

线程2准备业务数据data
线程2然后update-->读取库中的version是否等于1;因为库中的version=2,线程1的version=1,失败
storm trident拓扑就是使用乐观锁 。之前保存的数据，版本事务号，现在要更新的数据



第一步:用户发起请求到前端控制器（DispatcherServlet，一个servlet，单例的转发器，接受所有的请求）

第二步：前端控制器请求处理器映射器（HandlerMappering）去查找处理器（Handle）：通过xml配置或者注解进行查找

第三步：找到以后处理器映射器（HandlerMappering，handlerMappering.getHandlers()返回所有的controller和 interceptor）像前端控制器返回执行链（HandlerExecutionChain）

第四步：前端控制器（DispatcherServlet）调用处理器适配器（HandlerAdapter）去执行处理器（Handler）

第五步：处理器适配器去执行Handler

第六步：Handler执行完给处理器适配器返回ModelAndView

第七步：处理器适配器向前端控制器返回ModelAndView

第八步：前端控制器请求视图解析器（ViewResolver）去进行视图解析

第九步：视图解析器像前端控制器返回View

第十步：前端控制器对视图进行渲染

第十一步：前端控制器向用户响应结果


##########################################################################################################################
#############################RPC原理
1）服务消费方（client）调用以本地调用方式调用服务；
2）client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；
3）client stub找到服务地址，并将消息发送到服务端；
4）server stub收到消息后进行解码；
5）server stub根据解码结果调用本地的服务；
6）本地服务执行并将结果返回给server stub；
7）server stub将返回结果打包成消息并发送至消费方；
8）client stub接收到消息，并进行解码；
9）服务消费方得到最终结果。

dubbo在zookeeper中的注册信息;在项目运行中如果zk挂了，不会影响客户端调用服务端，客户端任然按照之前的负载均衡算法和检测机制(服务端是否存活)调用服务端
在实际运行中如果没有什么变动(如：增加服务端和消费端,调整负载均衡算法)那么客户端调用服务端是不涉及zk的;
/dubbo  #根节点可以在注册的时候设置，默认是dubbo
------/com.yixin.study.rpc.demo.HelloWorldService
------/com.yixin.study.rpc.demo.DemoService
------/.................
-----------------------------------------------/providers 
---------------------------------------------------------/目录下为提供者 URL 地址
-----------------------------------------------/consumers
---------------------------------------------------------/目录下为消费者 URL 地址
-----------------------------------------------/configurators
-----------------------------------------------/routers
所有提供者和消费者在zk上创建的节点都是临时节点，利用这个特性可以在服务端挂了的时候随时知道然后通知消费端
生产者启动向/providers下注册自己的url地址
消费者启动订阅/providers下所有生产者的url地址(后期消费者就是用这个地址调用服务端)，然后再在/consumers注册消费者的url地址

类加载过程
1,加载
1.1,首先通过一个类的全限定名来获取此类的二进制字节流(JVM规范允许类加载器在预料某个类将要被使用时就预先加载它)
1.2,将这个字节流所代表的静态存储结构转换为方法区的运行时数据结构
1.3,最后在java堆中生成一个代表这个类的Class对象，作为访问方法区这些数据的对象的入口
以上这些只是定义了结构存储在方法区和堆中，并没有实际的数据存储，数据存储只是在准备和初始化阶段
加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中
而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据。
2,连接 
2.1, 验证:确保被加载的类的正确性
2.2, 准备：为类的静态变量在方法区中分配内存,并将其初始化为默认值,如static a=1;准备阶段a=0;对于像final static b=2;准备阶段a=2;
2.3,把类中的符号引用转换为直接引用；
3,初始化
3.1,声明类变量是指定初始值,使用静态代码块为类变量指定初始值(什么时候会触发初始化：创建类的实例new的方式，反射Class.forName，初始化某个类的子类其父类也会被初始化等...)
Class.forName()：将类的.class文件加载到jvm中之外，还会对类进行解释，初始化，执行类中的static块；
ClassLoader.loadClass()：只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容,只有在newInstance才会去执行static块。

在编译时，java类并不知道所引用的类的实际地址，因此只能使用符号引用来代替
虚拟机提供了一个-XX:PretenureSizeThreshold参数，令大于这个设置值的对象直接在老年代分配

tomcat8支持使用redis集群或者单点session共享
年轻代分为了三部分：1个Eden区和2个Survivor区（分别叫from和to）。默认比例为8：1;赋值
新生代和老年代的比例为1：2，它们共同组成堆的内存区，所以新生代占堆的1/3，老年代占2/3;采用的标记-清除算法

用户车型推荐项目
storm+kafka+redis
1，根据用户浏览的数据对用户做出个性化推荐,
2，使用kafka接入用户数据，主要是注册用户的数据，数据主要包含用户的cookie信息(易鑫和易车共用同一cookie属性ID)和车的信息
3，根据用户数据获取用户的偏好车型，购买力等信息(用户信息通过接口来自易车和易鑫)存入redis,当前热销车型定时同步到redis有序集合中，以及车辆品牌，车型，车系等汽车基本数据也存入redis
4，根据用户购买力推荐相同价位用户选择的相同车辆类型相同品牌下不同车型的前N名热销车型
5，推荐数据发送到kafka中然后推送给用户

备注：
redis的ZREVRANGEBYSCORE 返回有序集合中指定分数区间内的成员，分数由高到低排序。
redis> ZADD myzset 1 "one"
(integer) 1
redis> ZADD myzset 2 "two"
(integer) 1
redis> ZADD myzset 3 "three"
(integer) 1
redis> ZREVRANGEBYSCORE myzset +inf -inf WITHSCORES   #从高到低带着分数返回集合全部
1) "three"
2) "3"
3) "two"
4) "2"
5) "three"
6) "1"
redis> ZREVRANGEBYSCORE myzset 2 1 WITHSCORES        #返回分数2到1的
1) "two"
2) "2"
3) "one"
4) "1"
redis> ZREVRANGEBYSCORE myzset 2 (1      #返回小于等于2大于1的
1) "two"
redis> ZREVRANGEBYSCORE myzset (2 (1     #"(" 符号作为开头表示小于
(empty list or set)
redis> ZREVRANGEBYSCORE myzset +inf (2 WITHSCORES LIMIT 0 1   #返回大于2的，分页返回前1条
1) "three"
2) "3"
redis>


Mysql索引
MyISAM和InnoDB存储引擎：只支持BTREE索引， 也就是说默认使用BTREE，不能够更换
InnoDB上常见索引：
	单列索引：一个索引只包含单个列，但一个表中可以有多个单列索引
		普通索引：MySQL中基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了查询数据更快一点。
		唯一索引：索引列中的值必须是唯一的，但是允许为空值，
		主键索引：是一种特殊的唯一索引，不允许有空值。
	组合索引：
		在表中的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索引时遵循最左前缀集合
为什么使用B+Tree作为索引的数据结构：磁盘I/O的读取次数评价索引结构的优劣,

mysql 索引
select a from table order by a   这个会使用索引(如果想加where条件只能是a字段)
select * from table order by a   这个使用的是filesort
select * from table FORCE INDEX(indx_a) order by a  这个强制使用索引


分表：对于不同的业务线的申请记录分不同的表
send_log          30万
subdatasource_log 30*20万
然后历史数据3个月备份一次

ACID： 原子性（Atomicity）一致性（Consistency）隔离性（Isolation）持久性（Durability）
事务的隔离性：
   ① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。锁表

　　② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。   mysql默认就是这个

　　③ Read committed (读已提交)：可避免脏读的发生。

　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。
脏读：是指在一个事务处理过程里读取了另一个未提交的事务中的数据(案例就是A,B转账)

不可重复读：一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了

幻读：一个事务在开始count了10条数据，然后另一个事务插入或者 删除了一条数据 ，那么这个事务在此读的时候数据就不一样了
Mysql默认使用的隔离级别是Repeatable read可以防止不可重复读和脏读，使用的传播机制是required(save,update,delete),查询是supports

访问一个网页的整个流程：
1，域名解析成IP地址；DNS域名解析
2，得到IP之后将与目的主机进行TCP连接（三次握手， 主要防止失效请求 ）；
3，发送与收取数据（浏览器与目的主机开始HTTP访问过程）；
	http请求由三部分组成，分别是：请求行、报文头、请求正文
		请求行：包含uri,请求方法get,post
		请求头：Host（发送请求时，该报头域是必需的）,Accept-Encoding,User-Agent
		请求正文：业务数据
	响应报文：
		状态行：200//客户端请求成功，403//服务器收到请求，但是拒绝提供服务，500//服务器发生不可预期的错误
		消息报头：
		响应正文：请求业务数据
4，与目的主机断开TCP连接



zookeeper选举算法简介：
总体思想就是谁的数据最新谁就当选为leader,在数据版本都一样的条件下选择sid最大的作为leader
比较的逻辑：将别人的投票和自己比较，选择别人zxid大的票再投出去，如果zxid相等那么选择sid大的投出去
投票内容：(sid,zxid)服务器id和数据版本id
                第一次自己投票      接口别人的投票                 比较然后第二次投票                                     已经有3/2 + 1大约等于2台了  直接选择2位leader
sid1   (1,0)        (2,0)            别人投的比自己的大 (2,0)(2,0)

sid2   (2,0)        (1,0)            自己的大                    (2,0)(2,0)
先启动两台就可以竞选了
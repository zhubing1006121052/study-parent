<?xml version="1.0" encoding="UTF-8"?>
<!-- status=debug 可以查看log4j的装配过程 设置log4j2的自身log级别
	status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
    monitorInterval : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。
-->
<configuration status="off" monitorInterval="1800">

	<!-- Log4j 2 包含了基于LMAX 分离库的下一代的异步日志系统，在多线程环境下，异步日志系统比 Log4j 1.x 和Logback 提高了10倍性能提升（吞吐量和延迟率 ） -->

	<properties>
		<!-- 日志备份目录 -->
		<!-- <property name="BACKUP_HOME">{HOME:-./logs}</property> -->
		<property name="BACKUP_HOME">/home/app/study/logs</property>
		<property name="PROJECT_NAME">study</property>
	</properties>

	<appenders>
		<!-- 定义控制台输出 -->
		<Console name="Console" target="SYSTEM_OUT" follow="true">
			<!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
			<!-- 此日志的级别 "trace" onmatch="accept" 表示匹配此级别及以上 onmismatch="neutral" 表示不匹配比此日志级别低的 -->
			<!-- 此日志的级别 "trace" onmatch="accept" 表示匹配此级别及以上 onmismatch="neutral" 表示不匹配比此日志级别低的 -->
           <!--  <ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY"/> -->
            <!-- 输出日志的格式 -->
            <!--
                %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
                %p : 日志输出格式
                %c : logger的名称
                %m : 日志内容，即 logger.info("message")
                %n : 换行符
                %C : Java类名
                %L : 日志输出所在行数
                %M : 日志输出所在方法名
                hostName : 本地机器名
                hostAddress : 本地ip地址
             -->
			<PatternLayout pattern="%sn [${PROJECT_NAME}] %d{yy/MM/dd HH:mm:ss,SSS} %r [%-6p] [%t] %C - %m%n" />
		</Console>

		<!-- 应用日志 -->
		<RollingRandomAccessFile name="RollingLog" fileName="${BACKUP_HOME}/Rolling.log" filePattern="${BACKUP_HOME}/Rolling.%d{yyyy-MM-dd-HH}.log">
			<!-- <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/> -->
			<PatternLayout pattern="%sn [${PROJECT_NAME}] %d{yy/MM/dd HH:mm:ss,SSS} %r [%-6p] [%t] %C{1.}.%M(%F:%L) - %m%n" />
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" modulate="true" />
			</Policies>
		</RollingRandomAccessFile>

		<!-- 单独业务日志 -->
		<RollingRandomAccessFile name="BusinessLog" fileName="${BACKUP_HOME}/Business.log" filePattern="${BACKUP_HOME}/Business.%d{yyyy-MM-dd-HH}.log">
			<PatternLayout pattern="%sn [${PROJECT_NAME}] %d{yy/MM/dd HH:mm:ss,SSS} %r [%-6p] [%t] %C{1.}.%M(%F:%L) - %m%n" />
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" modulate="true" />
			</Policies>
		</RollingRandomAccessFile>

		<!-- 日志输出到mongodb -->
		<!-- <NoSql name="databaseAppender"> -->
		<!-- <MongoDb databaseName="mvc" collectionName="business" server="127.0.0.1" port="27017" userName="root" password="password" /> -->
		<!-- <MongoDb databaseName="mvc" collectionName="business" server="127.0.0.1" port="27017" /> -->
		<!-- </NoSql> -->
	</appenders>

	<!-- log4j规定了默认的几个级别：trace<debug<info<warn<error<fatal等 -->
	<loggers>
		<!-- 3rdparty Loggers -->
		<!-- <logger name="com.yixin.study" level="trace" /> -->
		<!-- <logger name="org" level="info"/> -->
		<!-- <logger name="org.activiti" level="error" />
		<logger name="net.spy.memcached" level="error" />
		<logger name="org.springframework" level="error" />
		<logger name="org.apache" level="error" />
		<logger name="org.activiti" level="error" />
		<logger name="org.quartz" level="error" />
		<logger name="org.mybatis" level="info" />
		<logger name="com.google.code.yanf4j" level="error" />
		<logger name="net.rubyeye.xmemcached" level="error" /> -->
		

		<!-- 因为开始日志输出到mongo ， 所以它走error级别 -->
		<!-- <logger name="org.mongodb" level="error" /> -->

		<!-- mybatis sql log -->
		<!-- <logger name="org.apache.ibatis.jdbc.ScriptRunner" level="debug" />
		<logger name="java.sql.Connection" level="debug" />
		<logger name="java.sql.Statement" level="debug" />
		<logger name="java.sql.PreparedStatement" level="debug" /> -->

		<!-- Business logger -->
		<!-- 日志单独输出，单独输出到Businesslog文件当中，也在其它日志文件当中体现 -->
		<!-- 设置指定包目录下的输出级别 --> 
		<!-- 在类里面采用这种声明方式：private static final org.apache.logging.log4j.Logger LOG = org.apache.logging.log4j.LogManager.getLogger(Logstrap.class); -->
		<!-- <logger name="com.yixin.study" level="debug" additivity="false">
			<appender-ref ref="BusinessLog" />
			<appender-ref ref="RollingLog" />
			<appender-ref ref="Console" />
		</logger> -->
		<!-- <logger name="org.springframework" level="ERROR"/> -->
		<!-- 只会记录这个包com.yixin.study下面的日志到业务日志中additivity="true"此logger中的日志也会在root中打印，如果是false那么两个是独立的，业务日志不会再root中打印 -->
		<logger name="com.yixin.study" level="trace" additivity="true">
			<appender-ref ref="BusinessLog" />
		</logger>
		<!-- Root Logger -->
		<root level="trace">
			<appender-ref ref="Console" />
			<appender-ref ref="RollingLog" />
			<!-- <appender-ref ref="BusinessLog" /> -->
		</root>

	</loggers>

</configuration>